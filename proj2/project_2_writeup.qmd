---
title: "Client Report - [Insert Project Title]"
subtitle: "Course DS 250"
author: "[STUDENT NAME]"
format:
  html:
    self-contained: true
    page-layout: full
    title-block-banner: true
    toc: true
    toc-depth: 3
    toc-location: body
    number-sections: false
    html-math-method: katex
    code-fold: true
    code-summary: "Show the code"
    code-overflow: wrap
    code-copy: hover
    code-tools:
        source: false
        toggle: true
        caption: See code
    
---

```{python}
# | label: libraries
# | include: false
import pandas as pd
import altair as alt
import numpy as np
from scipy import stats
import json

```


## Elevator pitch

From my findings, based off of percentage of flights delayed and minutes of delay per flight, the Salt Lake City airport is the best to fly out of, and the San Francisco is the worst. Based off of the same criteria, September is the best month to fly in to avoid delays. At each airport, around 1/3 of flights are delayed due to weather.

```{python}
# | label: project data
# | code-summary: Read and format project data
# Include and execute your code here
data = "C:/Fall 23/ds250/proj2/flights_missing.json"
df = pd.read_json(data)
df_copy = df.copy()
```


## GRAND QUESTION 1

Which airport has the worst delays?

Based on my analysis, the San Francisco, CA airport has the highest percentage of delays, and the Chicago, IL airport has the longest delays on average. While finding this data, I realized some of the airport names were missing, so I created a funciton in order to add those names in based off of the airport codes to make the report more comprehensive. I then added the percent of flights delayed and the avg delay hours columns to view these specific critera.

```{python}
# | label: GQ1
# | code-summary: Read and format data
# Include and execute your code here
airport_name_mapping = {
    "IAD": "Washington, DC: Washington Dulles International",
    "SLC": "Salt Lake City, UT: Salt Lake City International",
    "SAN": "San Diego, CA: San Diego International",
    "ORD": "Chicago, IL: Chicago O'Hare International",
    "DEN": "Denver, CO: Denver International",
    "ATL": "Atlanta, GA: Hartsfield-Jackson Atlanta International",
    "SFO": "San Francisco, CA: San Francisco International",
}


def replace_empty_strings(row):
    if row["airport_name"] == "":
        return airport_name_mapping.get(row["airport_code"], "")
    else:
        return row["airport_name"]


df["airport_name"] = df.apply(replace_empty_strings, axis=1)


filtered_df = df.filter(
    [
        "airport_name",
        "num_of_flights_total",
        "num_of_delays_total",
        "minutes_delayed_total",
    ]
)

aggregated_df = (
    filtered_df.groupby("airport_name")
    .agg(
        {
            "num_of_flights_total": "sum",
            "num_of_delays_total": "sum",
            "minutes_delayed_total": "sum",
        }
    )
    .reset_index()
)
aggregated_df["percent_of_flights_delayed"] = (
    aggregated_df["num_of_delays_total"] / aggregated_df["num_of_flights_total"]
) * 100
aggregated_df["percent_of_flights_delayed"] = aggregated_df[
    "percent_of_flights_delayed"
].round(2)


aggregated_df["avg_delay_hours"] = (
    aggregated_df["minutes_delayed_total"] / aggregated_df["num_of_delays_total"]
) / 60
aggregated_df["avg_delay_hours"] = aggregated_df["avg_delay_hours"].round(2)

```



```{python}
# | label: GQ1 chart
# | code-summary: plot example
# | fig-cap: "My useless chart"
# | fig-align: center
# Include and execute your code here
aggregated_df.sort_values("percent_of_flights_delayed")
```



## GRAND QUESTION 2

What is the best month to fly if you want to avoid delays of any length?

The best month to fly in order to avoid any length of delay would be September. While months like November and October may have slightly shorter delays on average, September has a lower percentage of flights delayed overall.

```{python}
# | label: GQ2
# | code-summary: Read and format data
# Include and execute your code here
filtered_month_df = df.filter(
    [
        "airport_name",
        "month",
        "num_of_flights_total",
        "num_of_delays_total",
        "minutes_delayed_total",
    ]
)
filtered_month_df


aggregated_month_df = (
    filtered_month_df.groupby("month")
    .agg(
        {
            "num_of_flights_total": "sum",
            "num_of_delays_total": "sum",
            "minutes_delayed_total": "sum",
        }
    )
    .reset_index()
)

aggregated_month_df = aggregated_month_df.query('month != "n/a"')


aggregated_month_df["percent_of_flights_delayed"] = (
    aggregated_month_df["num_of_delays_total"]
    / aggregated_month_df["num_of_flights_total"]
) * 100
aggregated_month_df["percent_of_flights_delayed"] = aggregated_month_df[
    "percent_of_flights_delayed"
].round(2)

aggregated_month_df["avg_delay_hours"] = (
    aggregated_month_df["minutes_delayed_total"]
    / aggregated_month_df["num_of_delays_total"]
) / 60
aggregated_month_df["avg_delay_hours"] = aggregated_month_df["avg_delay_hours"].round(2)

```



```{python}
# | label: GQ2 chart
# | code-summary: plot example
# | fig-cap: "My useless chart"
# | fig-align: center
# Include and execute your code here
aggregated_month_df.sort_values("percent_of_flights_delayed")
```

## GRAND QUESTION 3

Your job is to create a new column that calculates the total number of flights delayed by weather (both severe and mild).

I created these columns by adding the weather category, with 30% of the late arriving and 40% of NAS from April to August and 65% of NAS from the remaining months. This resulted in the num of delays weather total column.

```{python}
# | label: GQ3
# | code-summary: Read and format data
# Include and execute your code here
df_without_missing = df.query("num_of_delays_late_aircraft != -999")

mean_late_aircraft = df_without_missing["num_of_delays_late_aircraft"].mean()
mean_late_aircraft = mean_late_aircraft.round(2)

df_total_weather = df.filter(
    [
        "airport_code",
        "month",
        "num_of_delays_total",
        "num_of_delays_late_aircraft",
        "num_of_delays_nas",
        "num_of_delays_weather",
    ]
)
df_total_weather["num_of_delays_late_aircraft"] = df_total_weather[
    "num_of_delays_late_aircraft"
].replace(-999, mean_late_aircraft)

df_total_weather["num_of_delays_late_new"] = (
    30 / 100 * df_total_weather["num_of_delays_late_aircraft"].round(0)
)


def calculate_num_of_delays_nas_new(row):
    if row["month"] in ["April", "May", "June", "July", "August"]:
        return 0.4 * row["num_of_delays_nas"]
    else:
        return 0.65 * row["num_of_delays_nas"]


df_total_weather["num_of_delays_nas_new"] = df_total_weather.apply(
    calculate_num_of_delays_nas_new, axis=1
)
df_total_weather["num_of_weather_delays_total"] = (
    df_total_weather["num_of_delays_late_new"]
    + df_total_weather["num_of_delays_nas_new"]
    + df_total_weather["num_of_delays_weather"]
)
df_total_weather["num_of_weather_delays_total"] = df_total_weather[
    "num_of_weather_delays_total"
].astype(int)

```



```{python}
# | label: GQ3 chart
# | code-summary: plot example
# | fig-cap: "My useless chart"
# | fig-align: center
# Include and execute your code here
df_total_weather.head(5)
```

## GRAND QUESTION 4

Using the new weather variable calculated above, create a barplot showing the proportion of all flights that are delayed by weather at each airport. Discuss what you learn from this graph.

I created this graph by layering the total weather delay data over to total delay data. I found that around 1/3 of flights at all of these airports are delayed due to weather.

```{python}
# | label: GQ3
# | code-summary: Read and format data
# Include and execute your code here
filtered_total_weather = df_total_weather.filter(
    ["airport_code", "num_of_delays_total", "num_of_weather_delays_total"]
)

filtered_total_weather

agg_weather_df = (
    df_total_weather.groupby("airport_code")
    .agg({"num_of_delays_total": "sum", "num_of_weather_delays_total": "sum"})
    .reset_index()
)

agg_weather_df


weather_chart = (
    alt.Chart(agg_weather_df)
    .mark_bar()
    .encode(
        x=alt.X("airport_code:N"),
        y=alt.Y(alt.repeat("layer"))
        .aggregate("mean")
        .title("Mean of US and Worldwide Gross"),
        color=alt.ColorDatum(alt.repeat("layer")),
    )
    .repeat(layer=["num_of_delays_total", "num_of_weather_delays_total"])
)

```



```{python}
# | label: GQ3 chart
# | code-summary: plot example
# | fig-cap: "My useless chart"
# | fig-align: center
# Include and execute your code here
weather_chart
```

## GRAND QUESTION 5

Fix all of the varied missing data types in the data to be consistent (all missing values should be displayed as “NaN”).



```{python}
# | label: GQ3
# | code-summary: Read and format data
# Include and execute your code here
df_copy.replace("", "NaN", inplace=True)

df_copy.to_json("modified_file.json", orient="records", lines=True)


row_to_print = df_copy.iloc[25].to_dict()

json_data = json.dumps(row_to_print)
```



```{python}
# | label: GQ3 chart
# | code-summary: plot example
# | fig-cap: "My useless chart"
# | fig-align: center
# Include and execute your code here
print(json_data)
```


## APPENDIX A (Additional Python Code)

```python
```
